import sys, time, certifi
from datetime import datetime, timedelta
from tls12_adapter import TLS12Adapter        # yeni adapter

sys.path.insert(0, r"C:\Users\PC\Documents\GitHub\Portfolio\borsa-mcp-main")
from providers.tefas_provider import TefasProvider
import pandas as pd, pyarrow as pa, pyarrow.parquet as pq

tp = TefasProvider()
tp.session.mount("https://", TLS12Adapter())   #  ← TLS 1.2’ye sabitledik
tp.session.verify = certifi.where()

tp.session.headers.update({
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) "
                   "Chrome/126.0 Safari/537.36"),
    "X-Requested-With": "XMLHttpRequest",
    "Origin": tp.base_url,
    "Referer": f"{tp.base_url}/TarihselVeriler.aspx"
})

# İlk GET – çerez ve token al
tp.session.get(tp.base_url, timeout=10)

def fetch_chunk(code, s, e, retries=3):
    for n in range(retries):
        try:
            return tp.get_fund_performance(code, s, e)["fiyat_geçmisi"]
        except Exception as err:
            wait = 2 ** n
            print(f"[{s}→{e}] deneme {n+1}: {err}  → {wait}s bekle")
            time.sleep(wait)
    print(f"[{s}→{e}] segmenti başarısız, atlandı")
    return []

def get_ppn_history():
    code, end = "PPN", datetime.now().date()
    start, step = end.replace(year=end.year-10), timedelta(days=90)
    cur, rows = start, []

    while cur <= end:
        nxt = min(cur+step, end)
        rows += fetch_chunk(code,
                            cur.strftime("%Y-%m-%d"),
                            nxt.strftime("%Y-%m-%d"))
        cur = nxt + timedelta(days=1)

    if not rows:
        raise RuntimeError("Veri alınamadı – muhtemelen IP/WAF engeli")

    df = (pd.DataFrame(rows)
            .sort_values("tarih")
            .drop_duplicates("tarih")
            .reset_index(drop=True))
    pq.write_table(pa.Table.from_pandas(df),
                   "ppn_history.parquet",
                   compression="zstd")
    print("✅  ppn_history.parquet → satır:", len(df))

if __name__ == "__main__":
    get_ppn_history()
